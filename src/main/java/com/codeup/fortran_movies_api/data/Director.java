package com.codeup.fortran_movies_api.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import java.util.List;

@Entity // just means its a reflection of the directors table
@Table(name = "directors")
public class Director {

    @Id // says that id is the primary key for this entity
    @GeneratedValue(strategy = GenerationType.IDENTITY) // -This type of generation relies on the IdentityGenerator,
    // which expects values generated by an identity column in the database. This means they are auto-incremented.
    private int id;
    private String name;

    @OneToMany(mappedBy = "director") // 1 director can be associated with many movies
    // mappedBy indicates which field on the Movie POJO links the Director and Movie together
    @JsonIgnoreProperties("director")
    private List<Movie> directedMovies; // adding a private list of type movie named directedMovies


//----- Constructor -----
    public Director(int id, String name) {
        this.id = id;
        this.name = name;
    }

//    ----- Empty constructor -----
    public Director() {

    }

//  ----- Constructor for creating new director object when checking if user inputted director exists in database(function in moviesController)
    public Director(String name) {
        this.name = name;
    }

    //    ----- Getters & Setters -----
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Movie> getDirectedMovies() {
        return directedMovies;
    }

    public void setDirectedMovies(List<Movie> directedMovies) {
        this.directedMovies = directedMovies;
    }

    //    ----- Override toString -----
    @Override
    public String toString() {
        return "Director{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}
